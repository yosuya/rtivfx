using UnityEngine;
using Intel.RealSense;

namespace Rsvfx
{
    // PointCloudBaker -- A Unity component that receives a color video stream
    // and point cloud stream (generated by a PointCloud processing block) and
    // convert them into attribute maps (position/color).
    public sealed class PointCloudBaker : MonoBehaviour
    {
        #region Editable attributes

        [Space]
        [SerializeField] RsFrameProvider _colorSource = null;
        [SerializeField] RsFrameProvider _pointSource = null;

        [Space]
        [SerializeField] RenderTexture _colorMap = null;
        [SerializeField] RenderTexture _positionMap = null;

        [Space]
        [SerializeField] float _depthThreshold = 10;
        [SerializeField, Range(0, 1)] float _brightness = 0;
        [SerializeField, Range(0, 1)] float _saturation = 1;

        [SerializeField, HideInInspector] ComputeShader _compute = null;

        #endregion

        #region Private objects

        (FrameQueue color, FrameQueue point) _frameQueue;
        DepthConverter _converter;

        #endregion

        #region MonoBehaviour implementation

        void Start()
        {
            _frameQueue = (new FrameQueue(1), new FrameQueue(1));
            _converter = new DepthConverter(_compute);

            _colorSource.OnNewSample += OnNewColorSample;
            _pointSource.OnNewSample += OnNewPointSample;
        }

        void OnDestroy()
        {
            _frameQueue.color?.Dispose();
            _frameQueue.point?.Dispose();
            _frameQueue = (null, null);

            _converter?.Dispose();
            _converter = null;
        }

        void Update()
        {
            // Try dequeuing and load a color frame.
            VideoFrame cf;
            if (_frameQueue.color.PollForFrame(out cf))
                using (cf)
                    using (var prof = cf.GetProfile<VideoStreamProfile>())
                        _converter.LoadColorData(cf, prof.GetIntrinsics());

            // Try dequeuing and load a point frame.
            Points pf;
            if (_frameQueue.point.PollForFrame(out pf))
                using (pf)
                    using (var prof = pf.GetProfile<VideoStreamProfile>())
                        _converter.LoadPointData(pf, prof.GetIntrinsics());

            // Update the converter options.
            _converter.Brightness = _brightness;
            _converter.Saturation = _saturation;
            _converter.DepthThreshold = _depthThreshold;

            // Bake them.
            _converter.UpdateAttributeMaps(_colorMap, _positionMap);
        }

        #endregion

        #region Frame provider callbacks

        void OnNewColorSample(Frame frame)
        {
            using (var cf = RetrieveColorFrame(frame))
                if (cf != null) _frameQueue.color.Enqueue(cf);
        }

        void OnNewPointSample(Frame frame)
        {
            using (var pf = RetrievePointFrame(frame))
                if (pf != null) _frameQueue.point.Enqueue(pf);
        }

        #endregion

        #region Frame query methods

        Frame RetrieveColorFrame(Frame frame)
        {
            using (var profile = frame.Profile)
            {
                if (profile.Stream == Stream.Color &&
                    profile.Format == Format.Rgba8 &&
                    profile.Index == 0)
                return frame;
            }

            if (frame.IsComposite)
            {
                using (var fs = FrameSet.FromFrame(frame))
                {
                    foreach (var f in fs)
                    {
                        var ret = RetrieveColorFrame(f);
                        if (ret != null) return ret;
                        f.Dispose();
                    }
                }
            }

            return null;
        }

        Frame RetrievePointFrame(Frame frame)
        {
            if (frame.Is(Extension.Points)) return frame;

            if (frame.IsComposite)
            {
                using (var fs = FrameSet.FromFrame(frame))
                {
                    foreach (var f in fs)
                    {
                        var ret = RetrievePointFrame(f);
                        if (ret != null) return ret;
                        f.Dispose();
                    }
                }
            }

            return null;
        }

        #endregion
    }
}
